import requests
import os
import hashlib
from urllib.parse import urlparse
from pathlib import Path

def get_filename_from_url(url):
    """Extracts filename from the URL or generates a default one."""
    parsed_url = urlparse(url)
    filename = os.path.basename(parsed_url.path)
    if not filename or '.' not in filename:
        filename = f"downloaded_image_{hashlib.md5(url.encode()).hexdigest()[:8]}.jpg"
    return filename

def is_image_content(response):
    """Checks if the Content-Type header indicates an image."""
    content_type = response.headers.get('Content-Type', '')
    return content_type.startswith('image/')

def is_duplicate(filepath, content):
    """Checks if a file with the same content already exists."""
    if not os.path.exists(filepath):
        return False
    with open(filepath, 'rb') as existing_file:
        return existing_file.read() == content

def fetch_image(url, directory):
    """Downloads and saves an image from a given URL."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        if not is_image_content(response):
            print(f"✗ Skipped (Not an image): {url}")
            return

        filename = get_filename_from_url(url)
        filepath = os.path.join(directory, filename)

        if is_duplicate(filepath, response.content):
            print(f"✓ Skipped duplicate: {filename}")
            return

        with open(filepath, 'wb') as f:
            f.write(response.content)

        print(f"✓ Successfully fetched: {filename}")
        print(f"✓ Image saved to {filepath}")
    except requests.exceptions.RequestException as e:
        print(f"✗ Connection error for {url}: {e}")
    except Exception as e:
        print(f"✗ An unexpected error occurred for {url}: {e}")

def main():
    print("Welcome my Image Fetcher")
    print("A great tool for mindfully collecting images from the web\n")

    urls_input = input("Please enter one or more image URLs (comma-separated):\n")
    urls = [url.strip() for url in urls_input.split(',') if url.strip()]

    if not urls:
        print("✗ No valid URLs provided. Exiting.")
        return

    directory = "Fetched_Images"
    os.makedirs(directory, exist_ok=True)

    for url in urls:
        fetch_image(url, directory)

    print("\nConnection strengthened. Community enriched.")

if __name__ == "__main__":
    main()
